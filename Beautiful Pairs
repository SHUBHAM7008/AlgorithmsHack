import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'beautifulPairs' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. INTEGER_ARRAY A
     *  2. INTEGER_ARRAY B
     */

    public static int beautifulPairs(List<Integer> A, List<Integer> B) {
    // Write your code here
     // Frequency maps to count occurrences of elements in A and B
        Map<Integer, Integer> freqA = new HashMap<>();
        Map<Integer, Integer> freqB = new HashMap<>();
        
        // Fill the frequency maps for lists A and B
        for (int i = 0; i < A.size(); i++) {
            freqA.put(A.get(i), freqA.getOrDefault(A.get(i), 0) + 1);
            freqB.put(B.get(i), freqB.getOrDefault(B.get(i), 0) + 1);
        }
        
        // Count the number of pairwise disjoint beautiful pairs
        int initialPairs = 0;
        for (int key : freqA.keySet()) {
            if (freqB.containsKey(key)) {
                initialPairs += Math.min(freqA.get(key), freqB.get(key));
            }
        }
        
        // After changing exactly one element in B, we can either increase by 1
        // or maintain the same number of pairs
        if (initialPairs < A.size()) {
            return initialPairs + 1;
        } else {
            return initialPairs - 1;
        }
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> A = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        List<Integer> B = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        int result = Result.beautifulPairs(A, B);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
