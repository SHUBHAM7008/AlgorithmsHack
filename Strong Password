import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'minimumNumber' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. INTEGER n
     *  2. STRING password
     */

    public static int minimumNumber(int n, String password) {
    // Return the minimum number of characters to make the password strong

    int mistakes=0;
    boolean lower=false,upper=false,special=false,num=false;
    for(char c : password.toCharArray()){
        if(Character.isDigit(c)){
            num=true;
            continue;
        }
        if(Character.isUpperCase(c)){
            upper=true;
            continue;
        }
        if(Character.isLowerCase(c)){
            lower=true;
            continue;
        }
        special=true;
    }
    if(!lower)
      mistakes++;
    if(!upper)
      mistakes++; 
    if(!num)
      mistakes++;
    if(!special)
      mistakes++;  
      
    if(n<6){
        if(mistakes<6-n)
           mistakes = 6-n;
    }  
    return mistakes;     
    }
  
}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        String password = bufferedReader.readLine();

        int answer = Result.minimumNumber(n, password);

        bufferedWriter.write(String.valueOf(answer));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
